#!/usr/bin/env python3
"""
D√©monstration de l'am√©lioration de la gestion des espaces
"""

import requests
import json

def demo_spacing_improvement():
    """D√©monstration de l'am√©lioration de la gestion des espaces"""
    
    print("üéØ D√©monstration de la gestion des espaces am√©lior√©e")
    print("=" * 60)
    
    # Cas probl√©matiques avant l'am√©lioration
    problematic_cases = [
        {
            "name": "Mots coll√©s apr√®s correction",
            "before": "sans ppr√©c√©dentdans l'histoire",
            "after": "sans pr√©c√©dent dans l'histoire",
            "description": "Correction de 'ppr√©cedent' qui cr√©ait des mots-coll√©s"
        },
        {
            "name": "Espaces multiples",
            "before": "Il y a   beaucoup   d'espaces   ici",
            "after": "Il y a trop d'espaces ici",
            "description": "Normalisation des espaces multiples"
        },
        {
            "name": "Correction en d√©but de phrase",
            "before": "ppr√©cedent dans l'histoire",
            "after": "Pr√©c√©dent dans l'histoire",
            "description": "Correction en d√©but sans espace superflu"
        },
        {
            "name": "Correction en fin de phrase",
            "before": "dans l'histoirre",
            "after": "dans l'histoire",
            "description": "Correction en fin sans espace superflu"
        }
    ]
    
    print("üìù Cas probl√©matiques r√©solus:")
    for i, case in enumerate(problematic_cases, 1):
        print(f"\n{i}. {case['name']}")
        print(f"   Description: {case['description']}")
        print(f"   Avant: '{case['before']}'")
        print(f"   Apr√®s: '{case['after']}'")
    
    print("\nüîß M√©canisme de normalisation des espaces:")
    print("   1. before.rstrip() - Supprime les espaces √† droite de la partie pr√©c√©dente")
    print("   2. after.lstrip() - Supprime les espaces √† gauche de la partie suivante")
    print("   3. repl.strip() - Nettoie la correction")
    print("   4. f\"{before} {repl} {after}\".strip() - Intercale des espaces et nettoie")
    
    print("\n‚úÖ Avantages:")
    advantages = [
        "Pr√©vention des mots-coll√©s comme 'sans ppr√©c√©dentdans'",
        "Normalisation automatique des espaces multiples",
        "Pas d'espaces superflus en d√©but/fin de phrase",
        "Coh√©rence de l'espacement dans tout le texte"
    ]
    
    for advantage in advantages:
        print(f"   ‚Ä¢ {advantage}")

def test_real_correction():
    """Test d'une correction r√©elle avec gestion des espaces"""
    
    print("\nüß™ Test d'une correction r√©elle")
    print("=" * 40)
    
    # Bloc de test avec probl√®me d'espacement
    test_block = {
        "id": "1",
        "type": "B",
        "number": 1,
        "content": "sans ppr√©c√©dentdans l'histoire de l'humanit√©"
    }
    
    try:
        # Sauvegarder le bloc
        response = requests.post(
            'http://localhost:5000/api/save',
            json={"blocks": [test_block]},
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code != 200:
            print("‚ùå Impossible de sauvegarder le bloc de test")
            return
        
        print(f"Original: '{test_block['content']}'")
        
        # Appliquer la correction
        correction_data = {
            "block_index": 0,
            "error_start": 5,
            "error_end": 15,
            "replacement": "pr√©c√©dent"
        }
        
        response = requests.post(
            'http://localhost:5000/api/apply-correction',
            json=correction_data,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            data = response.json()
            result = data['corrected']
            expected = "sans pr√©c√©dent dans l'histoire de l'humanit√©"
            
            print(f"R√©sultat: '{result}'")
            print(f"Attendu:  '{expected}'")
            
            if result == expected:
                print("‚úÖ SUCC√àS - Espacement g√©r√© correctement!")
                print("   Les mots ne sont plus coll√©s et les espaces sont normalis√©s.")
            else:
                print("‚ùå √âCHEC - Probl√®me d'espacement")
                print(f"   Diff√©rence: '{result}' vs '{expected}'")
        else:
            print(f"‚ùå Erreur lors de la correction: {response.status_code}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Impossible de se connecter au serveur.")
        print("üí° Assurez-vous que l'application Flask est en cours d'ex√©cution:")
        print("   python app.py")
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")

if __name__ == "__main__":
    print("üß™ D√©monstration de la gestion des espaces")
    print("=" * 60)
    
    demo_spacing_improvement()
    test_real_correction()
    
    print("\nüéâ D√©monstration termin√©e!")
    print("üí° La gestion des espaces est maintenant robuste et √©vite les mots-coll√©s!") 